# -*- Mode: python; py-indent-offset: 4; indent-tabs-mode: nil; coding: utf-8; -*-

def configure(conf):
    # Add CGAL-specific flags only when CGAL is in the libraries
    if 'CGAL' in conf.env['LIB']:
        conf.env.append_value("CXXFLAGS", ["-Wall", "-std=c++0x", "-frounding-math"])

    # Linking flags (if needed, you can add more here)
    conf.env.append_value("LINKFLAGS", [])

    # Libraries to link
    conf.env.append_value("LIB", ["CGAL", "CGAL_Core", "gmp", "mpfr", "boost_thread"])

def build(bld):
    # Create the obstacle module
    module = bld.create_ns3_module('obstacle', ['core', 'mobility', 'propagation', 'netanim'])
    module.source = [
        'model/obstacle.cc',
        'model/topology.cc',
        'model/obstacle-shadowing-propagation-loss-model.cc',
        'helper/obstacle-helper.cc',
    ]

    # Apply CGAL-specific flags for the obstacle module only
    module.env.append_value('CXXFLAGS', '-frounding-math')

    # Create the module test library
    module_test = bld.create_ns3_module_test_library('obstacle')
    module_test.source = [
        'test/obstacle-test-suite.cc',
    ]

    # Set up the headers for the module
    headers = bld(features='ns3header')
    headers.module = 'obstacle'
    headers.source = [
        'model/obstacle.h',
        'model/topology.h',
        'model/obstacle-shadowing-propagation-loss-model.h',
        'helper/obstacle-helper.h',
    ]

    # If examples are enabled, recurse through them
    if bld.env.ENABLE_EXAMPLES:
        bld.recurse('examples')

    # Optionally, you can enable Python bindings if needed
    # bld.ns3_python_bindings()
